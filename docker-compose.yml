version: '3.5'
services:

  node:
    depends_on:
      - nginx
    build:
      context: ./
      dockerfile: Dockerfile.node
      args:
        VERSION: ${LIBREHOST_STACK_SERVICE_1_VERSION:-8.10}
    restart: always
    expose:
      - "8080"
    labels:
      # librehost labels must be present on all services
      # librehost.stack.id must be equal the name of the repository
      - "librehost.stack.id=nginxnode"
      - "librehost.stack.name=${COMPOSE_PROJECT_NAME:?err}"
      - "librehost.stack.domains=${LIBREHOST_STACK_DOMAINS:?err}"
      - "librehost.stack.json=${LIBREHOST_STACK_JSON:?err}"
      - "librehost.stack.service.number=1"
      - "librehost.stack.service.name=${COMPOSE_PROJECT_NAME:?err}_node"
      - "librehost.stack.service.version=${LIBREHOST_STACK_SERVICE_1_VERSION:-8.10}"
    networks:
      - nginx
    environment:
      - PORT=8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 30s
      retries: 3
      #start_period: 5s
    command:
      - start

  nginx:
    networks:
      - reverseproxy
      - nginx
    build:
      context: ./
      dockerfile: Dockerfile.nginx
    restart: always
    expose:
      - "80"
    labels:
      # librehost labels must be present on all services
      # librehost.stack.id must be equal the name of the repository
      - "librehost.stack.id=nginxnode"
      - "librehost.stack.name=${COMPOSE_PROJECT_NAME:?err}"
      - "librehost.stack.domains=${LIBREHOST_STACK_DOMAINS:?err}"
      - "librehost.stack.json=${LIBREHOST_STACK_JSON:?err}"
      - "librehost.stack.service.number=2"
      - "librehost.stack.service.name=${COMPOSE_PROJECT_NAME:?err}_nginx"
      - "librehost.stack.service.version=${LIBREHOST_STACK_SERVICE_2_VERSION:-stable}"
      # https://docs.traefik.io/configuration/backends/docker/
      - "traefik.enable=true"
      - "traefik.backend=${COMPOSE_PROJECT_NAME:?err}_nginx"
      - "traefik.backend.loadbalancer.stickiness=true"
      - "traefik.docker.network=reverseproxy"
      #- "traefik.frontend.passHostHeader=true"
      - "traefik.${COMPOSE_PROJECT_NAME:?err}_nginx.frontend.passHostHeader=true"
      - "traefik.${COMPOSE_PROJECT_NAME:?err}_nginx.port=80"
      - "traefik.${COMPOSE_PROJECT_NAME:?err}_nginx.frontend.rule=Host:${LIBREHOST_STACK_DOMAIN:?err}"
    #healthcheck:
      #disable: true # if marked as unhealty reverseproxy will stop. 

networks:
  nginx:
  reverseproxy:
    external:
      name: reverseproxy
